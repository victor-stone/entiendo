{
  "version": "0.2.0",
  "configurations": [
    {
      // ===== Debug Server =====
      // Use this configuration when you need to debug ONLY the Express backend server
      // It starts nodemon with the debugger attached for hot reloading during development
      // Best for: Backend-focused development, API troubleshooting, database operations
      "type": "node",
      "request": "launch",
      "name": "Debug Server",
      "skipFiles": ["<node_internals>/**"],
      "program": "${workspaceFolder}/server.js",
      "runtimeExecutable": "nodemon",
      "restart": true,
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "outputCapture": "std", // Required for proper stdout/stderr capture with npm scripts
      "env": {
        "NODE_ENV": "development"
      }
    },
    {
      // ===== Attach to Server =====
      // Use this when your Express server is ALREADY RUNNING with --inspect flag
      // This lets you attach the debugger to an existing process rather than starting a new one
      // Best for: Debugging a server that's already running, or connecting to a remote process
      "type": "node",
      "request": "attach",
      "name": "Attach to Server",
      "port": 9229,
      "restart": true,
      "skipFiles": ["<node_internals>/**"],
      "outputCapture": "std" // Required for proper stdout/stderr capture
    },
    {
      // ===== Debug Vite =====
      // Use this configuration to debug ONLY the Vite dev server process
      // Starts Vite in development mode with hot module replacement for the React frontend
      // Best for: Frontend-focused development or when you need to debug Vite itself
      "type": "node",
      "request": "launch",
      "name": "Debug Vite",
      "skipFiles": ["<node_internals>/**"],
      "runtimeExecutable": "npm",
      "runtimeArgs": ["run", "dev:client"],
      "console": "integratedTerminal",
      "outputCapture": "std" // Required for proper stdout/stderr capture with npm scripts
    },
    {
      // ===== Debug Chrome =====
      // Use this to debug ONLY the frontend React code running in Chrome
      // Launches Chrome and connects the debugger to your React application
      // This configuration uses your DEFAULT Chrome profile to retain logins and cookies
      // Best for: React component debugging, frontend state management, UI interactions
      "type": "chrome",
        "request": "launch",
        "name": "Debug Chrome",
        "url": "http://localhost:5173",
        "webRoot": "${workspaceFolder}/src/client",
        "userDataDir": "${workspaceFolder}/.vscode/chrome-debug-profile",
        "runtimeArgs": [
          "--no-first-run",
          "--no-default-browser-check",
          "--app=http://localhost:5173" // This makes Chrome run in app mode
        ],
        "sourceMapPathOverrides": {
          "/@fs/*": "${webRoot}/*"
        }
    },
    {
      // ===== Debug Chrome (Private Profile) =====
      // This is an alternative Chrome configuration that uses a clean/isolated profile
      // Only use this when you want to test with a clean slate (no cookies/history/extensions)
      // This is the default VS Code behavior, but causes auth problems with Google/Auth0
      "type": "chrome",
      "request": "launch",
      "name": "Debug Chrome (Private Profile)",
      "url": "http://localhost:5173",
      "webRoot": "${workspaceFolder}/src/client",
      // Uses a persistent profile dir to maintain logins between debug sessions
      "userDataDir": "${workspaceFolder}/.vscode/chrome-debug-profile", 
      "sourceMapPathOverrides": {
        "/@fs/*": "${webRoot}/*"
      }
    },
    {
      // ===== Full Stack: Server + Client =====
      // Starts the Express server with debugging and automatically opens Chrome
      // when the server is ready (detects the "ENTIENDO Server running" message)
      // Best for: Quick debugging sessions focused on server-side code with some client testing
      // NOTE: Does NOT start the Vite dev server - use "Full Stack Debug" compound instead
      "name": "Full Stack: Server + Client",
      "type": "node",
      "request": "launch",
      "skipFiles": ["<node_internals>/**"],
      "runtimeExecutable": "npm",
      "runtimeArgs": ["run", "dev:server"],
      "port": 9229,
      "restart": true,
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "outputCapture": "std", // Required for proper stdout/stderr capture and pattern matching
      "serverReadyAction": {
        "pattern": "ENTIENDO Server running on port ([0-9]+)",
        "uriFormat": "http://localhost:5173",
        "action": "debugWithChrome",
        "webRoot": "${workspaceFolder}/src/client",
        "killOnServerStop": true,
        "uriFormat": "http://localhost:5173"
      }
    }
  ],
  "compounds": [
    {
      // ===== Full Stack Debug =====
      // RECOMMENDED: The most complete debugging setup that starts:
      // 1. The Express server with debugger (nodemon auto-restart)
      // 2. The Vite dev server for React frontend
      // 3. Chrome connected to the debugger with your default profile
      // Best for: Complete full-stack development with breakpoints in both frontend and backend
      "name": "Full Stack Debug",
      "configurations": ["Debug Server", "Debug Vite", "Debug Chrome"],
      "presentation": {
        "hidden": false,
        "group": "Main",
        "order": 1
      },
      "stopAll": true
    },
    {
      // ===== Full Stack Debug (Private Profile) =====
      // Same as Full Stack Debug but uses a clean Chrome profile
      // Useful for testing with a fresh browser state (no cookies/extensions)
      "name": "Full Stack Debug (Private Profile)",
      "configurations": ["Debug Server", "Debug Vite", "Debug Chrome (Private Profile)"],
      "presentation": {
        "hidden": false,
        "group": "Main",
        "order": 2
      },
      "stopAll": true
    }
  ]
}